/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package viapos.api;

import java.util.List;
import viapos.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-12-11T00:25:13.745Z")

@Api(value = "transactions", description = "the transactions API")
@RequestMapping(value = "/v1")
public interface TransactionsApi {

    @ApiOperation(value = "Authorizes a transaction", nickname = "authorizeTransactions", notes = "", response = Transaction.class, responseContainer = "List", tags={ "Payment Flows", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Transactions authorized", response = Transaction.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Transactions not found"),
            @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/transactions/authorize",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<List<Transaction>> authorizeTransactions(@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "Merchant Id to Process Under" ,required=true) @RequestHeader(value="merchantId", required=true) String merchantId,@ApiParam(value = "The preferred payment processor to send the transaction to." ,required=true) @RequestHeader(value="paymentProcessor", required=true) String paymentProcessor,@ApiParam(value = "Transaction objects to be authorized" ,required=true )  @Valid @RequestBody List<Transaction> transactions);

    @ApiOperation(value = "Refunds a transaction", nickname = "refundTransactions", notes = "", response = Transaction.class, responseContainer = "List", tags={ "Payment Flows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transactions refunded", response = Transaction.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Transactions not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/transactions/refund",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Transaction>> refundTransactions(@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "Transaction objects to be refunded" ,required=true )  @Valid @RequestBody List<Transaction> transactions);

}
