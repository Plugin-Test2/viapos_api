/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package viapos.api;

import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import viapos.model.Subscription;
import viapos.model.SubscriptionTriggerRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-01-06T23:36:52.493Z")

@Api(value = "subscriptions", description = "the subscriptions API")
@RequestMapping(value = "/v1")
public interface SubscriptionsApi {

    @ApiOperation(value = "Create new subscriptions", nickname = "createSubscriptions", notes = "", tags={ "Subscription", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Subscriptions created"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Pet not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createSubscriptions(@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "Subscription objects to be created" ,required=true )  @Valid @RequestBody List<Subscription> subscriptions);


    @ApiOperation(value = "Update an existing pet", nickname = "deleteSubscription", notes = "", tags={ "Subscription", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Subscription not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSubscription(@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "Subscription objects to be deleted" ,required=true )  @Valid @RequestBody List<Subscription> subscriptions);


    @ApiOperation(value = "Retrieve a single Subscription.", nickname = "getSubscription", notes = "", response = Subscription.class, tags={ "Subscription", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Subscription.class),
        @ApiResponse(code = 404, message = "Subscription not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/subscriptions/{subscriptionId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Subscription> getSubscription(@ApiParam(value = "ID of Subscription to return",required=true) @PathVariable("subscriptionId") String subscriptionId,@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept);


    @ApiOperation(value = "Retrieve all subscriptions.", nickname = "getSubscriptions", notes = "", response = Subscription.class, responseContainer = "List", tags={ "Subscription", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Subscription.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Subscription>> getSubscriptions(@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept);

    @ApiOperation(value = "Trigger for all of the subscriptions that need to be processed.", nickname = "triggerSubscriptions", notes = "", tags={ "Subscription", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 404, message = "Subscription not found"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/subscriptions/trigger",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> triggerSubscriptions(@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "Which Subscriptions to be triggered" ,required=true )  @Valid @RequestBody SubscriptionTriggerRequest subscriptionTriggerRequest);

    @ApiOperation(value = "Update existing subscriptions", nickname = "updateSubscriptions", notes = "", tags={ "Subscription", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Subscription not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSubscriptions(@ApiParam(value = "Content Type" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Format to send back" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "Subscription objects to be updated" ,required=true )  @Valid @RequestBody List<Subscription> subscriptions);

}
