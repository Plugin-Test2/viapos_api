# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      - master

name: Deploy to Amazon ECS

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - run: |
          echo "artifactory_user=jimmyc" >> gradle.properties
          echo "artifactory_password=${{secrets.JF_PASSWORD}}" >> gradle.properties
          cat gradle.properties
      - uses: actions/setup-java@v1
        with:
          java-version: '9.0.4' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - run: ./gradlew build  artifactoryPublish -PbuildNum=${{ github.sha }}
      - uses: actions/upload-artifact@v2
        with:
          name: jarfiles
          path: build/libs

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    env:
      # JFrog platform url (for example: https://acme.jfrog.io)
      JF_URL: ${{ secrets.JF_URL }}
      # JFrog Platform access token
      JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download jar for job 2
      uses: actions/download-artifact@v1
      with:
        name: jarfiles
    - name: 'Setup JFrog'
      uses: jfrog/setup-jfrog-cli@v3
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and s
        # push it to Artifactory
        echo ${{ secrets.JF_PASSWORD }} | docker login ${{vars.JF_URL}} -u ${{ vars.JF_USERNAME }} --password-stdin
        docker build --build-arg JAR_FILE=jarfiles/*.jar -t ${{vars.JF_URL}}/${{vars.JF_DOCKER_REPO}}/viapos_api:$IMAGE_TAG .
        docker push ${{vars.JF_URL}}/${{vars.JF_DOCKER_REPO}}/viapos_api:$IMAGE_TAG
        
        # sha=$(docker manifest inspect ${{vars.JF_URL}}/${{vars.JF_DOCKER_REPO}}/viapos_api:$IMAGE_TAG | jq '.config.digest' | tr -d '"' )
        repoDigest=$(docker inspect ${{vars.JF_URL}}/${{vars.JF_DOCKER_REPO}}/viapos_api:$IMAGE_TAG | jq '.[0].RepoDigests[0]' | tr -d '"')
        echo "Sha is $repoDigest"
        jf rt bdc ${{vars.JF_DOCKER_REPO}} --image-file $repoDigest --build-name=jimmmys-springboot-apps --build-number=${{ github.sha }}
        jf rt bp jimmmys-springboot-apps ${{ github.sha }}

